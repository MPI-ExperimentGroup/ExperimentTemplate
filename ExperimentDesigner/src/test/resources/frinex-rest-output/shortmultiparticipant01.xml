<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<experiment appNameDisplay="shortmultiparticipant01" appNameInternal="shortmultiparticipant01" availableLocales="en" backgroundColour="#FFFFFF" complementColour0="#EAC3A3" complementColour1="#9D7B5E" complementColour2="#C69E7C" complementColour3="#FFEDDE" complementColour4="#FFFDFB" defaultLocale="en" defaultScale="1.0" isScalable="true" preserveLastState="true" primaryColour0="#628D8D" primaryColour1="#385E5E" primaryColour2="#4A7777" primaryColour3="#96ADAD" primaryColour4="#D5D8D8" rotatable="true" showMenuBar="false" textFontSize="17" xsi:noNamespaceSchemaLocation="http://frinexbuild.mpi.nl/frinex.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <administration/>
    <scss>
        $angleArray: 10 15 30 45 60 75 90 105 120 135 150 165 180 195 200 210 225 240 255 270 285 300 315 330 345 350 360;
        @each $currentAngle in $angleArray {
            .gwt-Image.moveRotated#{$currentAngle}Animation,
            .gwt-Button.stimulusButton.moveRotated#{$currentAngle}Animation {
                animation: moveRotated#{$currentAngle}KeyFrames 1.7s infinite;
                /*-webkit-animation: moveRotated10KeyFrames 2s infinite;*/
                margin: 100px;
                background: none;
                position: relative;
                animation-timing-function: linear;
                /*-webkit-animation-timing-function: ease;*/
                width: 100px;
            }
        }
        @each $currentAngle in $angleArray {
            @keyframes moveRotated#{$currentAngle}KeyFrames {
                from {
                    transform: rotate(#{$currentAngle}deg)
                    translate(0px)
                    rotate(-#{$currentAngle}deg);
                }
                to {
                    transform: rotate(#{$currentAngle}deg)
                    translate(100px)
                    rotate(-#{$currentAngle}deg);
                }
            }
        }
    </scss>
    <metadata>
        <field controlledMessage="Please enter at least three letters." controlledRegex=".'{'3,'}'" postName="workerId" preventServerDuplicates="false" registrationField="Worker ID"/>
    </metadata>
    <presenter menuLabel="Instruction" type="text" self="Instruction" title="Instruction">
        <htmlText featureText="test syncing and participant use?"/>
        <targetButton featureText="volgende [ spatiebalk ]" hotKey="SPACE" target="Accord"/>
    </presenter>
    <presenter back="Instruction" menuLabel="Accord" next="screenTag" type="metadata" self="Accord" title="Accord">
        <htmlText featureText="agreementScreenText"/>
        <targetButton featureText="Je suis d'accord" target="screenTag"/>
    </presenter>
    <presenter back="Accord" menuLabel="screenTitle" next="Set1" type="metadata" self="screenTag" title="screenTitle">
        <htmlText featureText="dispalyText"/>
        <saveMetadataButton featureText="saveButtonLabel" sendData="true">
            <onSuccess>
                <gotoNextPresenter/>
            </onSuccess>
            <onValidationError/>
            <onNetworkError/>
            <dataAgreementError/>
        </saveMetadataButton>
        <addPadding/>
        <htmlText featureText="postText"/>
        <targetButton featureText="alternateButtonLabel" target="Instruction"/>
    </presenter>
    <presenter back="screenTag" menuLabel="Set1" next="Fini" type="stimulus" self="Set1" title="Set1">
        <clearCurrentScore evaluateTokens=""/>
        <centrePage/>
        <htmlText featureText="preStimuliText"/>
        <actionButton featureText="Volgende [enter]" hotKey="ENTER">
            <groupStimuli adjacencyThreshold="3" eventTag="Set1" randomise="true" repeatRandomWindow="0" maxStimuli="23" repeatCount="1">
                <groupNetwork groupMembers="A,B,C,D" phasesPerStimulus="1" groupCommunicationChannels="A|B|C|D">
                    <groupInitialisationError/>
                    <groupNetworkConnecting/>
                    <groupFindingMembers/>
                    <groupNetworkSynchronising/>
                    <groupPhaseListeners>
                        <groupMemberActivity phaseMembers="A,B,C,D">
                            <clearPage/>
                            <stimulusLabel/>
                            <htmlText featureText="All 23 stimuli are presented all participants in random order similar to the producer screen"/>
                            <stimulusPresent maxHeight="0" percentOfPage="0" animate="stimuliCode" showControls="false" maxWidth="0">
                                <mediaLoaded/>
                                <mediaLoadFailed/>
                                <mediaPlaybackStarted/>
                                <mediaPlaybackComplete>
                                    <addPadding/>
                                    <sendGroupMessageButton featureText="Volgende [enter]" eventTag="TextEntered" incrementPhase="1" hotKey="ENTER" repeatIncorrect="false"/>
                                </mediaPlaybackComplete>
                            </stimulusPresent>
                        </groupMemberActivity>
                    </groupPhaseListeners>
                </groupNetwork>
                <endOfStimulus>
                    <clearPage/>
                    <logTokenText headerKey="logTokenText" dataChannel="3" type="groupMemberActivity" dataLogFormat="Group:'&lt;groupId&gt;';Members:'&lt;groupAllMemberCodes&gt;';Score:&lt;groupScore&gt;;Channels:'&lt;groupCommunicationChannels&gt;';Scores:'&lt;channelLoop&gt;&lt;channelLabel&gt;-&lt;channelScore&gt; &lt;/channelLoop&gt;';&lt;groupMemberCode&gt;-best:&lt;playerBestScore&gt;;&lt;groupMemberCode&gt;-current:&lt;playerScore&gt;;GroupOther:'&lt;groupOtherMemberCodes&gt;';ChannelOther:'&lt;channelOtherMemberCodes&gt;';&lt;groupActiveChannel&gt;:&lt;channelScore&gt;;Message:'&lt;groupMessageString&gt;';"/>
                    <htmlTokenText featureText="postStimuliText"/>
                    <actionButton featureText="Volgende [enter]" hotKey="ENTER">
                        <gotoNextPresenter/>
                    </actionButton>
                </endOfStimulus>
                <randomGrouping/>
                <stimuli>
                    <tag>Set1</tag>
                </stimuli>
            </groupStimuli>
        </actionButton>
    </presenter>
    <presenter back="Set1" menuLabel="Fini" type="transmission" self="Fini" title="Fini">
        <generateCompletionCode>
            <onSuccess>
                <htmlText featureText="completionScreenText1"/>
                <addPadding/>
                <displayCompletionCode/>
            </onSuccess>
            <onError>
                <plainText featureText="Impossible de contacter le serveur, vérifiez votre connexion Internet s'il vous plaît."/>
                <targetButton featureText="Réessayer" target="Fini"/>
            </onError>
        </generateCompletionCode>
    </presenter>
    <stimuli>
        <stimulus code="moveRotated30" identifier="5.png:shape1:Set1:quadrant1:moveRotated30" imagePath="5.png" pauseMs="0" tags="5 Set1 moveRotated30 quadrant1 shape1"/>
    </stimuli>
</experiment>
